---
# Lua Language Server
- name: "lua-language-server: check if installed"
  stat:
    path: "{{ apps_dir }}/lua-language-server"
  register: lls_status
  ignore_errors: true
  changed_when: false
- name: "lua-language-server: install build dependencies"
  when: not lls_status.stat.exists
  become: true
  apt:
    name:
      - build-essential
- name: "lua-language-server: clone"
  when: not lls_status.stat.exists
  git:
    repo: "https://github.com/LuaLS/lua-language-server"
    dest: "{{ projects_dir }}/lua-language-server"
    version: "3.13.9"
    depth: 1
- name: "lua-language-server: build"
  when: not lls_status.stat.exists
  shell:
    cmd: ./make.sh
    chdir: "{{ projects_dir }}/lua-language-server"
- name: "lua-language-server: install"
  when: not lls_status.stat.exists
  file:
    src: "{{ projects_dir }}/lua-language-server"
    dest: "{{ apps_dir }}/lua-language-server"
    state: link

# Rust Analyzer
- name: "rust-analyzer: check if installed"
  shell: rust-analyzer --version
  register: rust_analyzer_status
  ignore_errors: true
  changed_when: false
- name: "rust-analyzer: instsall"
  shell: rustup component add rust-analyzer
  when: rust_analyzer_status is failed

# Clangd
- name: "clangd: install"
  become: true
  apt:
    name:
      - clangd

# Ansible LS
- name: "ansible-language-server: install"
  community.general.npm:
    name: "@ansible/ansible-language-server"
    global: true

# ZLS
- name: "zls: check if installed"
  shell: |
    . "${HOME}/.profile"
    zls --version
  register: zls_status
  ignore_errors: true
  changed_when: false
- name: "zls: clone"
  when: zls_status is failed
  git:
    repo: "https://github.com/zigtools/zls"
    version: "{{ zig_version }}"
    dest: "{{ projects_dir }}/zls"
    depth: 1
- name: "zls: build"
  when: zls_status is failed
  shell:
    cmd: |
      . "${HOME}/.profile"
      zig build -Doptimize=ReleaseSafe --prefix "{{ apps_dir }}/zls"
    chdir: "{{ projects_dir }}/zls"

# BLS
- name: "bash-language-server: install"
  community.general.npm:
    name: bash-language-server
    global: true

# Pyright
- name: "pyright: install"
  community.general.npm:
    name: pyright
    global: true

# OmniSharp
- name: "omnisharp: check if installed"
  stat:
    path: "{{ apps_dir }}/omnisharp/OmniSharp.dll"
  register: omnisharp_status
  ignore_errors: true
  changed_when: false
- name: "omnisharp: download (x86_64)"
  when:
    - not omnisharp_status.stat.exists
    - ansible_architecture == "x86_64"
  get_url:
    url: "https://github.com/OmniSharp/omnisharp-roslyn/releases/download/{{ omnisharp_version }}/omnisharp-linux-x64-net6.0.tar.gz"
    dest: /tmp/omnisharp.tar.gz
    mode: "0644"
    force: false
- name: "omnisharp: download (aarch64)"
  when:
    - not omnisharp_status.stat.exists
    - ansible_architecture == "x86_64"
  get_url:
    url: "https://github.com/OmniSharp/omnisharp-roslyn/releases/download/{{ omnisharp_version }}/omnisharp-linux-arm64-net6.0.tar.gz"
    dest: /tmp/omnisharp.tar.gz
    mode: "0644"
    force: false
- name: "omhisharp: create directory"
  when: not omnisharp_status.stat.exists
  file:
    path: "{{ apps_dir }}/omnisharp"
    state: directory
- name: "omnisharp: extract"
  when: not omnisharp_status.stat.exists
  unarchive:
    src: /tmp/omnisharp.tar.gz
    dest: "{{ apps_dir }}/omnisharp"
